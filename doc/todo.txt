1a1. bindings need a 'type' field that can be used to fill in the blanks. e.g. object, tile, &c. this can be inferred from the comparison used. requesters must know the type of the binding they're asking for.
1a2. pseudovariables like object.direction and self.visible for movement-related triggers?  or postpone that until later?

2. latching and pulling/pushing by bumps (on_chomp, on_tug_left, on_tug_right, on_tug_back, on_tug_forward)
2a. need objects that block movement and possibly even sight
2a1. this should be easier now that objects are stored in objectmap
2a2. this makes doors low-hanging fruit, if objects can also be consulted for sight
2a3. got to update the parser for this, as well as Object's definition (include wall-like light blocking) and ObjectInfo's definition (include moveinfos)
2b. move both objects in smap_move_objects (try to move the block first; if it fails, the move fails)
2b1. what if the block falls? does that automatically release the latch?  Probably.
2b2. Is "tug something that won't move" distinct from "tug something that can move", trigger-wise?
3. eating and digestion
3a. does every object get stomach info? or does it live in something like a per-object Bindings of dynamic vars?
3b. need a stomach display
3c. need to track the objects eaten by salamander? or can special effects be obtained by means of statuses (eat_grant, eat_revoke, etc? or an action { on_eat })? (memory management concern - removing objects from the map might cause the map to free them)

Later:
Object creation overrides need to be able to supply new data.
	Can Bindings and StructRecord be unified?
Carry strength might be a loaded variable.
Statuses with persistent effects
DrawInfo control over drawing when the owner is in a particular status or set of statuses
Tile memory should maybe look down to find tiles to see like drawTiles() does?

